int gridUnit =6;
int startX = 0;
int startY = 0;
int endX = 0;
int endY = 7;
int length = 8;
int width = 8;
int obsticals =0;
int holdX;
int holdY;
int currentX;
int currentY;
int OBX[40];
int OBY[40];
long racer;
long starter;
/**/

struct Node
{
	unsigned char pX;
	unsigned char pY;
	unsigned char g;
	unsigned char h;
};

Node info[width][length];
unsigned char openSet[width][length];
int path[2][50];

void insertObs(int x, int y){
	int i;
	int j;
	for(i=x*6; i<x*6+6; i++){
		for(j=y*6; j<y*6+6; j++){
			PointOut(i,j);
		}
	}
}

void makeGrid(){
	RectOut(0,0, length*6, width*6);
	int i=0;	
	for(i=0;i<width;i++){
		LineOut(0,i*6,length*6,i*6);
	}
	for(i=0;i<length;i++){
		LineOut(i*6,0,i*6,width*6);
	}
	LineOut(startX*6,startY*6, startX*6+6, startY*6+6);
	LineOut(startX*6+6, startY*6,startX*6,startY*6+6);
	LineOut(endX*6+3,endY*6, endX*6+3, endY*6+6);
	LineOut(endX*6, endY*6+3,endX*6+6,endY*6+3);
	for(i=0; i<obsticals; i++){
		int obsx = OBX[i];
		int obsy = OBY[i];
		insertObs(obsx, obsy);
	}
}
void checking(int x, int y){
	int i;
	int j;
	for(i=x*6+2; i<x*6+5; i++){
		for(j=y*6+2; j<y*6+5; j++){
			PointOut(i,j);
		}
	}
}
void makePath(int prevX, int prevY, int x, int y){
	LineOut(prevX*6+3, prevY*6+3, x*6+3, y*6+3);
}
void leftTurn(){	
	//RotateMotor(OUT_AC, -80, 130);
	/*RotateMotor(OUT_A, 80, 240);
	RotateMotor(OUT_C, -80, 225);*/
	RotateMotorEx(OUT_AC, 80, 315, -100, true, true);
	Off(OUT_AC);
}
void rightTurn(){
	//RotateMotor(OUT_AC, -80, 130);
	/*RotateMotor(OUT_C, 80, 250);
	RotateMotor(OUT_A, -80, 240);*/
	RotateMotorEx(OUT_AC, 80, 315, 100, true, true);
	Off(OUT_AC);
}
void objFound(long time){
	long hold;
	hold = CurrentTick();
	while(CurrentTick()-hold < time){
		OnFwd(OUT_AC, -80);
	}
	Off(OUT_AC);
}
int oneTile(){
	SetSensorHTEOPD(IN_1, 1);
	SetSensorLight(IN_4, 1);
	unsigned long hold;
	unsigned long time;
	long delta;
	hold = CurrentTick();
	time = CurrentTick();
	while(time-hold < 1075){
		if(SensorValue(IN_1) >= 5 || SensorValue(IN_4) <= 50){
			objFound(time-hold);
			return -1;
		}
		OnFwd(OUT_C, 80);
		OnFwd(OUT_A, 84);
		NumOut(75,8,SensorValue(IN_1));
		NumOut(75,16,SensorValue(IN_4));		
		time = CurrentTick();
		NumOut(75,0,time-hold);
	}
	Off(OUT_AC);
	
	/*RotateMotor(OUT_A, 80, 75);
	Off(OUT_AC);
	RotateMotor(OUT_C, 80, 70);*/
	return 1;
}

void turnAround(){
	leftTurn();
	//RotateMotor(OUT_AC, 80, 168);
	leftTurn();
	Off(OUT_AC);
	//RotateMotor(OUT_A, 80, 50);
}	

Node aStar(){
	int i;
	int j;
	int deltaX;
	int deltaY;
	for(i=0; i<width; i++){
		for(j=0; j<length; j++){
			openSet[i][j] = 0;
			info[i][j].pX = -1;
			info[i][j].pY = -1;
			info[i][j].h = 255;
			if(endX-i <0){
				deltaX = i-endX;
			}else{
				deltaX = endX-i;
			}
			if(endY-j <0){
				deltaY = j-endY;
			}else{
				deltaY = endY-j;
			}
			info[i][j].g = deltaX+deltaY;
		}
	}
	openSet[startX][startY] = 1;
	info[startX][startY].pX = startX;
	info[startX][startY].pY = startY;
	info[startX][startY].h = 0;
	if(endX-startX <0){
		deltaX = startX-endX;
	}else{
		deltaX = endX-startX;
	}
	if(endY-startY <0){
		deltaY = startY-endY;
	}else{
		deltaY = endY-startY;
	}
	deltaX=0;
	deltaY=0;
	if(obsticals >0){
		/*OBX[0]=2;
		OBX[1]=4;
		OBX[2]=4;
		OBX[3]=4;
		OBX[4]=4;
		OBX[5]=4;
		OBX[6]=5;
		OBX[7]=6;


		OBY[0]=2;
		OBY[1]=0;
		OBY[2]=5;
		OBY[3]=4;
		OBY[4]=3;
		OBY[5]=2;
		OBY[6]=2;
		OBY[7]=2;
		for(i=0; i<obsticals; i++){
			int obsx;
			int obsy;
			obsx = OBX[i];
			obsy = OBY[i];
			openSet[obsx][obsy]=2;	
			insertObs(obsx, obsy);
		}
	}
	/*int ud=80;
	for(j=0; j<length; j++){
		int lr=0;
		for(i=0; i<width; i++){
			NumOut(ud,lr, openSet[i][j]);
			lr+=8;
		}
		ud-=8;
	}*/
	int hit;
	hit =1;
	while(openSet[endX][endY]!=2){
		if(hit == 0){
			return NULL;
		}
		hit=0;
		int compare;
		compare = 255;
		for(i=0; i<width; i++){
			for(j=0; j<length; j++){
				if(openSet[i][j]==1){
					int val;
					val = info[i][j].g+info[i][j].h;
					if(compare > val){
						compare = val;
						holdX = i;
						holdY = j;
					}
					hit++;
				}
			}
		}
		checking(holdX, holdY);
		int num;
		if(holdX != 0){
			if(openSet[holdX-1][holdY]!=2){
				num=(info[holdX-1][holdY].h)+(info[holdX-1][holdY].h);
				if(num > info[holdX-1][holdY].g+info[holdX][holdY].h+1){
					info[holdX-1][holdY].h = info[holdX][holdY].h+1;
					info[holdX-1][holdY].pX = holdX;
					info[holdX-1][holdY].pY = holdY;
					openSet[holdX-1][holdY] = 1;
				}
			}
		}
		if(holdX!=width-1){
			if(openSet[holdX+1][holdY]!=2){
				num = info[holdX+1][holdY].g+info[holdX+1][holdY].h;
				if(num > info[holdX+1][holdY].g+info[holdX][holdY].h+1){
					info[holdX+1][holdY].h = info[holdX][holdY].h+1;
					info[holdX+1][holdY].pX = holdX;
					info[holdX+1][holdY].pY = holdY;
					openSet[holdX+1][holdY] = 1;
				}
			}
		}
		if(holdY != 0){
			if(openSet[holdX][holdY-1]!=2){
				num = info[holdX][holdY-1].g+info[holdX][holdY-1].h;
				if(num > info[holdX][j-1].g+info[holdX][holdY].h+1){
					info[holdX][holdY-1].h = info[holdX][holdY].h+1;
					info[holdX][holdY-1].pX = holdX;
					info[holdX][holdY-1].pY = holdY;
					openSet[holdX][holdY-1] = 1;
				}
			}
		}
		if(holdY!=length-1){
			if(openSet[holdX][holdY+1]!=2){
				num = info[holdX][holdY+1].g+info[holdX][holdY+1].h;
				if(num > info[holdX][holdY+1].g+info[holdX][holdY].h+1){
					info[holdX][holdY+1].h = info[holdX][holdY].h+1;
					info[holdX][holdY+1].pX = holdX;
					info[holdX][holdY+1].pY = holdY;
					openSet[holdX][holdY+1] = 1;
				}
			}
		}
		openSet[holdX][holdY]=2;
		//ClearScreen();
		/*ud=80;
		for(j=0; j<length; j++){
			int lr=0;
			for(i=0; i<width; i++){
				NumOut(ud,lr, openSet[i][j]);
				lr+=8;
			}
			ud-=8;
		}*/
	}
	return info[endX][endY];
}

task main(){
	starter = CurrentTick();
	SetMotorRegulationTime(1);
	SetSensorHTEOPD(IN_1, 1);
	SetSensorLight(IN_4, 1);
	ClearScreen();
	makeGrid();
	Node end = aStar();
	ClearScreen();
	makeGrid();
	Node end2 = end;
	int holdX = endX;
	int holdY = endY;
	int count =2;
	while(end.pX != startX || end.pY != startY){
		end = info[end.pX][end.pY];
		holdX = end.pX;
		holdY = end.pY;	
		count+=1;	
	}
	path[0][0] =startX;
	path[1][0] =startY;
	path[0][count-1] =endX;
	path[1][count-1] =endY;
	int i;
	for(i=count-2; i>-1; i--){
		path[0][i] = end2.pX;
		path[1][i] = end2.pY;
		end2 = info[end2.pX][end2.pY];	
	}
	for(i=1; i<count; i++){
		makePath(path[0][i-1], path[1][i-1],path[0][i], path[1][i]);
	}
	int step =1;
	int dir =0;
	/*
		0
		^
	3 <   >	1
		v
		2
	*/
	currentX = startX;
	currentY = startY;
	int nextX;
	int nextY;
	int result;
	while(currentX != endX || currentY != endY){
		nextX = path[0][step];
		nextY = path[1][step];
		if(dir == 0){
			if(nextX < currentX){
				leftTurn();
				result = oneTile();
				dir =3;
			}else if(nextX > currentX){
				rightTurn();
				result = oneTile();
				dir = 1;
			}else if(nextY < currentY){
				turnAround();
				result = oneTile();
				dir =2;
			}else if(nextY > currentY){
				result = oneTile();
			}
		}else if(dir == 1){
			if(nextX < currentX){
				dir =3;
				turnAround();
				result = oneTile();
			}else if(nextX > currentX){
				result = oneTile();
			}else if(nextY < currentY){
				dir =2;
				rightTurn();
				result = oneTile();
				
			}else if(nextY > currentY){
				dir = 0;
				leftTurn();
				result = oneTile();
			}
		}else if(dir == 2){
			if(nextX < currentX){
				dir =3;
				rightTurn();
				result = oneTile();
			}else if(nextX > currentX){
				dir = 1;
				leftTurn();
				result = oneTile();
			}else if(nextY < currentY){
				result = oneTile();
			}else if(nextY > currentY){
				dir =0;
				turnAround();
				result = oneTile();
			}
		}else if(dir == 3){
			if(nextX < currentX){
				result = oneTile();
			}else if(nextX > currentX){
				dir =1;
				turnAround();
				result = oneTile();
			}else if(nextY < currentY){
				dir =2;
				leftTurn();
				result = oneTile();
				
			}else if(nextY > currentY){
				dir = 0;
				rightTurn();
				result = oneTile();
			}	
		}
		if(result ==-1){
			obsticals++;
			OBX[obsticals-1] = nextX;
			OBY[obsticals-1] = nextY;
			insertObs(nextX, nextY);
			startX = currentX;
			startY = currentY;
			ClearScreen();
			makeGrid();
			Node redo = aStar();
			ClearScreen();
			makeGrid();
			Node redo2 = redo;
			holdX = endX;
			holdY = endY;
			count =2;
			while(redo.pX != startX || redo.pY != startY){
				redo = info[redo.pX][redo.pY];
				holdX = redo.pX;
				holdY = redo.pY;	
				count+=1;	
			}
			path[0][0] =startX;
			path[1][0] =startY;
			path[0][count-1] =endX;
			path[1][count-1] =endY;
			for(i=count-2; i>-1; i--){
				path[0][i] = redo2.pX;
				path[1][i] = redo2.pY;
				redo2 = info[redo2.pX][redo2.pY];	
			}
			for(i=1; i<count; i++){
				makePath(path[0][i-1], path[1][i-1],path[0][i], path[1][i]);
			}
			step = 1;
		}else{
			currentX = nextX;
			currentY = nextY;
			step++;
		}
	}
	racer = CurrentTick();
	while(1){
		long delta2 = (racer-starter)/1000;
		NumOut(70,56, delta2);
		TextOut(70,48, "done");
	}
	
}
